name: Deploy-Staging
on:
  issue_comment:
    types: [created]
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports: ['5432:5432']
    steps: 
      - uses: khan/pull-request-comment-trigger@v1.1.0
        id: check
        with:
          trigger: '@staging'
          reaction: eyes
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - uses: actions/github-script@v6
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - uses: actions/checkout@v3
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} # or .head.ref for branch name

      - name: Setup Ruby 3.1.1
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.1

      - name: Setup Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Get yarn cache
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install --frozen-lockfile

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/test
          REDIS_URL: redis://localhost:6379/0
          RAILS_ENV: test
          # RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          PG_USER: postgres
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate
          RAILS_ENV=test bundle exec rake

      - name: Deploy To Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "rails-test-jemerson-staging"
          heroku_email: "jfnandopr@gmail.com"

      - uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: staging

      - uses: mshick/add-pr-comment@v2
        with:
          message: |
            **Staging deployed** :rocket:
            we can send slack message
